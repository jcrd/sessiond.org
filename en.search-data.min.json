[{"id":0,"href":"/building/","title":"Building","parent":"Overview","content":"Dependencies     meson \u0026gt;= 0.47.0 [build] perl [build] glib \u0026gt;= 2.52 [build] libx11 [build] libxi [build] libxext (optional, for DPMS support) [build] python3-setuptools [build] python3 [runtime] dbus-python [runtime]  Ensure the above build dependencies are satisfied and configure the build with meson:\nmeson builddir \u0026amp;\u0026amp; cd builddir Inside the build directory, meson configure will list all options set with -D. For example, to disable the DPMS feature, run:\nmeson configure -Ddpms=disabled Finally, run ninja to build sessiond.\nTesting    Run tests with meson test.\nInstalling    After building sessiond, ninja install can be used to install it.\nThe sessiond Python package must also be installed. Run:\ncd python-sessiond python3 setup.py install "},{"id":1,"href":"/categories/","title":"Categories","parent":"Overview","content":""},{"id":2,"href":"/configuration/","title":"Configuration","parent":"Overview","content":"sessiond looks for a configuration file at $XDG_CONFIG_HOME/sessiond/sessiond.conf or falls back to $HOME/.config/sessiond/sessiond.conf if $XDG_CONFIG_HOME is unset.\nThe default configuration is included at /usr/share/sessiond/sessiond.conf.\nSee sessiond.conf(5) for descriptions of the options.\nHooks    Hook files with the .hook suffix are read from $XDG_CONFIG_HOME/sessiond/hooks.d or $HOME/.config/sessiond/hooks.d.\nHooks provide functionality similar to systemd targets but can also be triggered by a period of inactivity.\nSee sessiond-hooks(5) for more information.\n"},{"id":3,"href":"/dbus-service/","title":"DBus service","parent":"Overview","content":"sessiond provides a DBus service on the session bus at the well-known name org.sessiond.session1.\nSee the DBus Service section of sessiond(1) for descriptions of methods, properties, and signals.\nFor complete introspection data, use gdbus:\ngdbus introspect --session --dest org.sessiond.session1 --object-path /org/sessiond/session1 sessionctl    The sessionctl script is provided to run a sessiond session and interact with its DBus service.\nusage: sessionctl [-h] {run,stop,status,lock,unlock,properties,backlight,version} ... With no arguments, show session status. positional arguments: {run,stop,status,lock,unlock,properties,backlight,version} run Run session stop Stop the running session status Show session status lock Lock the session unlock Unlock the session properties List session properties backlight Interact with backlights version Show sessiond version optional arguments: -h, --help show this help message and exit See sessionctl(1) for more information.\n"},{"id":4,"href":"/getting-started/","title":"Getting started","parent":"Overview","content":"Installation     Packages  If a package is available for your distro, install it using the instructions below:\n  RPM package available from copr. \nInstall with:\ndnf copr enable jcrd/sessiond dnf install sessiond    From source  Follow the instructions below to build sessiond from source. See Building for a complete list of dependencies.\n Download and extract the latest release, then enter the created directory:  curl -L https://github.com/jcrd/sessiond/archive/refs/tags/v0.5.0.tar.gz | tar -xz -C sessiond cd sessiond Initiate the build process with meson and ninja:  meson builddir ninja -C builddir Install the built package:  sudo ninja -C builddir install Install the Python package:  cd python-sessiond sudo python3 setup.py install    Usage    See Usage for details about using sessiond.\nRefer to dovetail.service for a working example of integrating a window manager with sessiond.\nExamples of services for use in a sessiond session can be found here.\nConfiguration    sessiond does not require configuration but allows it to modify the default behavior.\nSee Configuration for more information.\n"},{"id":5,"href":"/man/","title":"Manpages","parent":"Overview","content":"    sessionctl.1     sessiond-hooks.5     sessiond-inhibit.1     sessiond.1     sessiond.conf.5     "},{"id":6,"href":"/","title":"Overview","parent":"","content":"sessiond is a standalone X session manager that reports the idle status of a graphical session to systemd-logind. It can be used alongside a window manager or desktop environment that does not provide its own session management.\nFeatures     automatic screen locking on session idle and before sleeping automatic backlight dimming on session idle systemd targets activated by systemd-logind\u0026rsquo;s lock, unlock, sleep, and shutdown signals hooks triggered by inactivity or signals a DBus service (optional) management of DPMS settings  Get started   "},{"id":7,"href":"/python/","title":"Python API","parent":"Overview","content":"    class sessiond.Backlight(name)  property brightness() property dev_path() inc_brightness(v) property max_brightness() property online() set_brightness(v) property subsystem() property sys_path()   class sessiond.DBusIFace(path, iface)  static convert(val) get_properties() get_property(name)   class sessiond.Session()  property backlights() property idle_hint() property idle_since_hint() property idle_since_hint_monotonic() inhibit(who='', why='') property inhibited_hint() list_inhibitors() lock() property locked_hint() stop_inhibitors() uninhibit(id) unlock() property version()       python-sessiond API    class sessiond.Backlight(name)    An interface to a sessiond Backlight object.\n  Parameters\nname – The backlight’s name\n  property brightness()    Backlight’s brightness.\n  Returns\nBrightness value\n  property dev_path()    Backlight device’s path.\n  Returns\nPath to the backlight device without the sys mount point\n  inc_brightness(v)    Increment the backlight’s brightness.\n  Parameters\nv – Brightness value by which to increment\n  Returns\nThe new brightness value\n  Raises\ndbus.exception.DBusException – Raised if unable to set brightness\n  property max_brightness()    Backlight’s maximum brightness.\n  Returns\nMaximum brightness value\n  property online()    Backlight’s online status.\n  Returns\nTrue if online, False otherwise\n  set_brightness(v)    Set the backlight’s brightness.\n  Parameters\nv – Brightness value\n  Raises\ndbus.exception.DBusException – Raised if unable to set brightness\n  property subsystem()    Backlight’s subsystem.\n  Returns\nName of backlight’s subsystem\n  property sys_path()    Backlight device’s /sys path.\n  Returns\nPath to the device via sys mount point\n  class sessiond.DBusIFace(path, iface)    Base interface to the sessiond DBus service.\n  Parameters\n  path – DBus object path\n  iface – DBus interface name\n    static convert(val)    Convert a DBus-typed value to its python-type.\n  Parameters\nval – Value to convert\n  Returns\nThe python-typed value\n  get_properties()    Get all DBus properties and values.\n  Returns\nA dictionary mapping property names to values\n  get_property(name)    Get a DBus property’s value.\n  Parameters\nname – The property’s name\n  Returns\nThe property’s value\n  class sessiond.Session()    An interface to sessiond’s Session.\nproperty backlights()    List of backlights.\n  Returns\nA list of Backlight DBus object paths\n  property idle_hint()    Session idle hint.\n  Returns\nTrue if session is idle, False otherwise\n  property idle_since_hint()    The timestamp of the last change to IdleHint.\n  Returns\nThe timestamp\n  property idle_since_hint_monotonic()    The timestamp of the last change to IdleHint in monotonic time.\n  Returns\nThe timestamp\n  inhibit(who='', why='')    Add an inhibitor.\n  Parameters\n  who – A string describing who is inhibiting\n  why – A string describing why this inhibitor is running\n    Returns\nThe inhibitor’s ID\n  property inhibited_hint()    Session inhibited hint.\n  Returns\nTrue if session is inhibited, False otherwise\n  list_inhibitors()    List running inhibitors.\n  Returns\nA dictionary mapping IDs to tuples of the creation timestamp and ‘who’ and ‘why’ strings\n  lock()    Lock the session.\n  Raises\ndbus.exception.DBusException – Raised if the session is already locked\n  property locked_hint()    Session locked hint.\n  Returns\nTrue if session is locked, False otherwise\n  stop_inhibitors()    Stop running inhibitors.\n  Returns\nThe number of inhibitors stopped\n  uninhibit(id)    Remove an inhibitor.\n  Parameters\nid – The inhibitor’s ID\n  Raises\ndbus.exception.DBusException – Raised if the ID is not valid or does not exist\n  unlock()    Unlock the session.\n  Raises\ndbus.exception.DBusException – Raised if the session is not locked\n  property version()    sessiond version.\n  Returns\nsessiond’s version string\n  "},{"id":8,"href":"/man/sessionctl.1/","title":"sessionctl.1","parent":"Manpages","content":"NAME    sessionctl - standalone X session manager client\nSYNOPSIS    sessionctl [command]\nDESCRIPTION    sessionctl is responsible for running a sessiond session and interacting with its DBus service.\nCOMMANDS      run [SERVICE]\nRun a new session, with SERVICE as the window manager service if provided. By default, the service installed under the window-manager.service alias is used.\n  stop\nStop the running session.\n  status\nShow session status.\n  lock\nLock the session.\n  unlock\nUnlock the session.\n  properties\nList sessiond properties.\n  backlight\nInteract with backlights. Subcommands:\n  list\nList backlights.\n  get BACKLIGHT\nGet backlight brightness.\n  set BACKLIGHT VALUE\nSet backlight brightness.\n  inc BACKLIGHT VALUE\nIncrement backlight brightness. Prints the new brightness value.\n    version\nShow sessiond version.\n  AUTHOR    James Reed jcrd@sessiond.org\nREPORTING BUGS    Bugs and issues can be reported here: https://github.com/jcrd/sessiond/issues\nCOPYRIGHT    Copyright 2019-2020 James Reed. sessiond is licensed under the GNU General Public License v3.0 or later.\nSEE ALSO    systemctl(1), gdbus(1)\n"},{"id":9,"href":"/man/sessiond-hooks.5/","title":"sessiond-hooks.5","parent":"Manpages","content":"NAME    sessiond-hooks - sessiond hook file format\nSYNOPSIS     [Hook] Trigger=Lock|Idle|Sleep|Shutdown|Inactive InactiveSec=\u0026lt;seconds\u0026gt; (Inactive only) ExecStart=\u0026lt;command\u0026gt; ExecStop=\u0026lt;command\u0026gt; (Lock|Idle|Inactive only)  DESCRIPTION    sessiond provides the ability to define hooks that are triggered by events. The \u0026ldquo;Inactive\u0026rdquo; event is unique to hooks. It allows commands to be run after a period of inactivity. It is more general than the \u0026ldquo;Idle\u0026rdquo; event, which occurs after IdleSec (see sessiond.conf(5)) seconds of inactivity.\nHooks can be specified in the configuration file using the section \u0026ldquo;[[Hook]]\u0026rdquo;. See sessiond.conf(5).\nHook files with the \u0026ldquo;.hook\u0026rdquo; suffix are read from XDG_CONFIG_HOME/sessiond/hooks.d or HOME/.config/sessiond/hooks.d.\nOPTIONS      Trigger=\nEvent type that will trigger the hook. Values are \u0026ldquo;Lock\u0026rdquo;, \u0026ldquo;Idle\u0026rdquo;, \u0026ldquo;Sleep\u0026rdquo;, \u0026ldquo;Shutdown\u0026rdquo;, \u0026ldquo;Inactive\u0026rdquo;.\n  InactiveSec=\nSeconds of inactivity after which the hook is triggered.\n  ExecStart=\nCommand to execute when the hook is triggered.\n  ExecStop=\nCommand to execute when the trigger event ends. For \u0026ldquo;Lock\u0026rdquo;, this is when the screen is unlocked. For \u0026ldquo;Idle\u0026rdquo; and \u0026ldquo;Inactive\u0026rdquo;, this is when activity resumes.\n  SEE ALSO    sessiond(1), sessiond.conf(5)\n"},{"id":10,"href":"/man/sessiond-inhibit.1/","title":"sessiond-inhibit.1","parent":"Manpages","content":"NAME    sessiond-inhibit - manage sessiond inhibitors\nSYNOPSIS    sessiond-inhibit [options] [COMMAND]\nDESCRIPTION    sessiond-inhibit creates an inhibitor lock before running COMMAND and releases it when the command returns. If no command is provided, it lists running inhibitors.\nOPTIONS      -h\nShow help message.\n  -w WHO\nSet who is inhibiting.\n  -y WHY\nSet why this inhibitor is running.\n  -s\nStop running inhibitors.\n  -i\nInhibit without a command.\n  -u [ID]\nUninhibit last inhibitor or by ID.\n  AUTHOR    James Reed jcrd@sessiond.org\nREPORTING BUGS    Bugs and issues can be reported here: https://github.com/jcrd/sessiond/issues\nCOPYRIGHT    Copyright 2019-2020 James Reed. sessiond is licensed under the GNU General Public License v3.0 or later.\nSEE ALSO    sessiond(1), systemd-inhibit(1)\n"},{"id":11,"href":"/man/sessiond.1/","title":"sessiond.1","parent":"Manpages","content":"NAME    sessiond - standalone X session manager\nSYNOPSIS    sessiond [OPTIONS]\nDESCRIPTION    sessiond is a standalone X session manager that reports the idle status of a session to systemd-logind.service(8) and handles its lock, unlock, sleep, and shutdown signals. sessiond also provides hooks triggered by inactivity or a signal, automatic backlight dimming on idle, and optional management of DPMS settings.\nOPTIONS      -h, \u0026ndash;help\nShow help options.\n  -c, \u0026ndash;config=CONFIG\nPath to config file. See sessiond.conf(5) for configuration options.\n  -i, \u0026ndash;idle-sec=SEC\nSeconds the session must be inactive before considered idle.\n  -v, \u0026ndash;version\nShow version.\n  DBUS SERVICE    sessiond provides a DBus service on the session bus at the well-known name org.sessiond.session1.\nSession interface    The /org/sessiond/session1 object implements the org.sessiond.session1.Session interface, which exposes the following methods, properties, and signals:\nMETHODS      Lock\nLock the session. Returns an error if the session is already locked.\n  Unlock\nUnlock the session. Returns an error if the session is not locked.\n  Inhibit\nInhibit inactivity. The session will always be considered active if at least one inhibitor is running. Takes two arguments:\n  who\nA string describing who is inhibiting.\n  why\nA string describing why the inhibitor is running.\n  Returns a unique ID used to stop the inhibitor.\n  Uninhibit\nStop an inhibitor. Takes one argument:\n  id\nThe unique ID of the inhibitor to stop.\n  Returns an error if the ID is not valid or does not exist.\n  StopInhibitors\nStop running inhibitors. Returns the number of inhibitors stopped.\n  ListInhibitors\nList running inhibitors. Returns a dictionary mapping IDs to tuples of the creation timestamp and who and why strings.\n  PROPERTIES      InhibitedHint\nThe inhibited state of the session.\n  LockedHint\nThe locked state of the session.\n  IdleHint\nThe idle state of the session.\n  IdleSinceHint\nThe timestamp of the last change to IdleHint.\n  IdleSinceHintMonotonic\nThe timestamp of the last change to IdleHint in monotonic time.\n  Backlights\nAn array of object paths to exported Backlights.\n  Version\nThe version of sessiond.\n  SIGNALS      Lock\nEmitted when the session is locked. LockedHint will be true.\n  Unlock\nEmitted when the session is unlocked. LockedHint will be false.\n  Idle\nEmitted when the session becomes idle. IdleHint will be true.\n  Active\nEmitted when activity resumes in an inactive session. IdleHint will be false.\n  Inactive seconds\nEmitted when the session becomes inactive, with the seconds argument being the number of seconds since activity. Its value will be equal to either the IdleSec or DimSec configuration option (see sessiond.conf(5)), or the InactiveSec option of a hook with an Inactive trigger (see sessiond-hooks(5)).\n  PrepareForSleep state\nEmitted before and after system sleep, with the state argument being true and false respectively.\n  PrepareForShutdown state\nEmitted before and after system shutdown, with the state argument being true and false respectively.\n  AddBacklight path\nEmitted when a backlight is added, with path being the object path of the new backlight.\n  RemoveBacklight path\nEmitted when a backlight is removed, with path being the old object path of the backlight.\n  Backlight interface    The /org/sessiond/session1/backlight/* objects implement the org.sessiond.session1.Backlight interface, which exposes the following methods and properties:\nMETHODS      SetBrightness\nSet the brightness of the backlight. Takes one argument:\n  brightness\nAn unsigned integer value.\n  Returns an error if unable to set brightness.\n  IncBrightness\nIncrement the brightness of the backlight. Takes one argument:\n  value\nAn integer value added to the backlight\u0026rsquo;s current brightness.\n  Returns the new brightness value or an error if unable to set brightness.\n  PROPERTIES      Online\nTrue if the backlight is online, false otherwise.\n  DevPath\nPath to the backlight device without the sys mount point.\n  Name\nName of the backlight.\n  Subsystem\nSubsystem to which the backlight belongs. Possible values are: \u0026ldquo;backlight\u0026rdquo; or \u0026ldquo;leds\u0026rdquo;.\n  SysPath\nPath to the device via sys mount point. Format is: \u0026ldquo;/sys/class/Subsystem/Name\u0026rdquo;.\n  Brightness\nCurrent brightness of backlight.\n  MaxBrightness\nMax brightness of backlight.\n  Introspection      For complete introspection data, use gdbus(1):\ngdbus introspect \u0026ndash;session \u0026ndash;dest org.sessiond.session1 \u0026ndash;object-path /org/sessiond/session1\n  DEBUGGING    Running sessiond with the environment variable G_MESSAGES_DEBUG set to \u0026ldquo;all\u0026rdquo; will print debug messages.\nAUTHOR    James Reed jcrd@sessiond.org\nREPORTING BUGS    Bugs and issues can be reported here: https://github.com/jcrd/sessiond/issues\nCOPYRIGHT    Copyright 2018-2020 James Reed. sessiond is licensed under the GNU General Public License v3.0 or later.\nSEE ALSO    sessiond.conf(5), sessiond-hooks(5), systemd-logind.service(8), gdbus(1)\n"},{"id":12,"href":"/man/sessiond.conf.5/","title":"sessiond.conf.5","parent":"Manpages","content":"NAME    sessiond.conf - sessiond configuration file format\nSYNOPSIS    XDG_CONFIG_HOME/sessiond/sessiond.conf or HOME/.config/sessiond/sessiond.conf\nDESCRIPTION    This file configures the X session manager sessiond(1). Its syntax is toml v0.5.0. See: https://github.com/toml-lang/toml/tree/v0.5.0.\nOPTIONS    [Idle]      Inputs=\nA list (of the format [\u0026ldquo;item\u0026rdquo;, \u0026ldquo;item\u0026rdquo;]) of input event types used to determine activity. Values are \u0026ldquo;motion\u0026rdquo;, \u0026ldquo;button-press\u0026rdquo;, \u0026ldquo;button-release\u0026rdquo;, \u0026ldquo;key-press\u0026rdquo;, \u0026ldquo;key-release\u0026rdquo;.\n  IdleSec=\nSeconds the session must be inactive before considered idle.\n  [Lock]      OnIdle=\nIf \u0026ldquo;true\u0026rdquo;, lock the session when it becomes idle.\n  OnSleep=\nIf \u0026ldquo;true\u0026rdquo;, lock the session when systemd-logind(8) sends the \u0026ldquo;PrepareForSleep\u0026rdquo; signal.\n  StandbySec=\nDPMS standby timeout in seconds to use while session is locked. Must occur before or simultaneously with Suspend timeout.\n  SuspendSec=\nDPMS suspend timeout in seconds to use while session is locked. Must occur before or simultaneously with Off timeout.\n  OffSec=\nDPMS off timeout in seconds to use while session is locked.\n  [DPMS]      Enable=\nIf \u0026ldquo;true\u0026rdquo;, apply DPMS settings, including those in the \u0026ldquo;[Lock]\u0026rdquo; section.\n  StandbySec=\nDPMS standby timeout in seconds. Must occur before or simultaneously with Suspend timeout.\n  SuspendSec=\nDPMS suspend timeout in seconds. Must occur before or simultaneously with Off timeout.\n  OffSec=\nDPMS off timeout in seconds.\n  [[Backlight]]    Backlights are configured as an array of tables, using the section \u0026ldquo;[[Backlight]]\u0026rdquo;. The options will be applied to backlights with the same path.\n  Path=\nPath to the backlight device via sys mount point. Should be of the format: \u0026ldquo;/sys/class/subsystem/name\u0026rdquo;.\n  DimSec=\nSeconds the session must be inactive before the backlight is dimmed.\n  DimValue=\nValue of the backlight brightness when dimming.\n  DimPercent=\nPercentage to lower backlight brightness when dimming.\n  [[Hook]]    Hooks are configured as an array of tables, using the section \u0026ldquo;[[Hook]]\u0026rdquo;. See sessiond-hooks(5) for a description of options.\nSEE ALSO    sessiond(1), systemd-logind.service(8), sessiond-hooks(5)\n"},{"id":13,"href":"/systemd-targets/","title":"systemd targets","parent":"Overview","content":"sessiond provides the following systemd targets:\n   Target Started when     graphical-lock.target session is locked   graphical-unlock.target session is unlocked   graphical-idle.target session becomes idle   graphical-unidle.target session resumes activity   user-sleep.target system sleeps   user-sleep-finished.target system resumes from sleeps   user-shutdown.target system shuts down    "},{"id":14,"href":"/tags/","title":"Tags","parent":"Overview","content":""},{"id":15,"href":"/usage/","title":"Usage","parent":"Overview","content":"  Starting the session Running a window manager Running services Manually stopping the session Locking the session Inhibiting inactivity   Starting the session    A sessiond-based session should be started via a display manager, using the provided sessiond session desktop entry.\nFor example, configure lightdm to start a sessiond session by setting user-session=sessiond in /etc/lightdm/lightdm.conf.\nRunning a window manager    To use sessiond alongside a window manager, the window manager service must include:\n[Install] Alias=window-manager.service An example twm.service:\n[Unit] Description=Window manager Requires=sessiond-session.target After=sessiond.service PartOf=graphical-session.target [Service] ExecStart=/usr/bin/twm Restart=always [Install] Alias=window-manager.service Enable the window manager service with systemctl --user enable twm.service. Now, when the sessiond session is started via the display manager, this service will run as the window manager and the session will be stopped when it exits.\nRunning services    sessiond-session.target binds to graphical-session.target provided by systemd. See graphical-session.target in systemd.special(7) for more information about graphical sessions.\nTo run a service in the graphical session, \u0026lt;service\u0026gt;.service should contain:\n[Unit] PartOf=graphical-session.target so the service is stopped when the session ends, and:\n[Install] WantedBy=graphical-session.target so the service is started when the session begins.\nIt can then be enabled with systemctl --user enable \u0026lt;service\u0026gt;.\nManually stopping the session    The session can be stopped with sessionctl stop. This will stop graphical-session.target and all units that are part of the session.\nA service that is part of the graphical session can be responsible for stopping the session. To configure a service to stop the session when it exits, include:\n[Service] ExecStopPost=/usr/bin/sessionctl stop Locking the session    By default, the session is locked when it becomes idle and before sleeping. This is configured in the [Lock] section of the configuration file. The session can be manually locked by running sessionctl lock.\nTo configure a service to act as the screen locker, include:\n[Service] ExecStopPost=/usr/bin/sessionctl unlock so the session is considered unlocked when the locker exits, and:\n[Install] WantedBy=graphical-lock.target so the service is started when the session locks. Then enable it.\nBelow is an example i3lock.service:\n[Unit] Description=Lock X session with i3lock PartOf=graphical-session.target [Service] ExecStart=/usr/bin/i3lock -n -c 000000 ExecStopPost=/usr/bin/sessionctl unlock [Install] WantedBy=graphical-lock.target Inhibiting inactivity    Inhibitor locks can be acquired when the session should be considered active while a given command is running, e.g. a media player.\nThe sessiond-inhibit script provides a simple interface to acquire a lock before running a command and release it when the command returns.\nusage: sessiond-inhibit [-h] [-w WHO] [-y WHY] [-s] [-i] [-u [ID]] [command] With no command, list running inhibitors. positional arguments: command Command to run optional arguments: -h, --help show this help message and exit -w WHO, --who WHO Set who is inhibiting -y WHY, --why WHY Set why this inhibitor is running -s, --stop Stop running inhibitors -i, --inhibit Inhibit without a command -u [ID], --uninhibit [ID] Uninhibit last inhibitor or by ID See sessiond-inhibit(1) for more information.\nSee the DBus Service section of sessiond(1) for descriptions of inhibitor-related methods.\n"}]